#!/bin/bash

set -e
declare -A processes
declare -a nested_links

WORKING_TEMP_DIR=$(mktemp -d -t tmp.XXXXXXXXXX)
STATUS=0
function finish {
  rm -rf "$WORKING_TEMP_DIR"
  for link in "${nested_links[@]}"; do
    rm -f "$link"
  done
  exit $STATUS
}
trap finish EXIT

CURSE_URL='https://www.curseforge.com'
ADDON_DIR="${1:-$WOW_ADDON_DIR}"
if [ -z "$ADDON_DIR" ]
then
  echo 'Set $WOW_ADDON_DIR or pass addon directory as argument!'
  exit 1
fi

git_repo() {
  git clone "$1" "$ADDON_DIR$2" 2> /dev/null || git -C "$ADDON_DIR$2" pull &> /dev/null
}

curse_slug() {
  zip_path=$(curse_download_path "$1")
  [ -z "$zip_path" ] && return 1

  zip_url "$CURSE_URL"$zip_path &
  processes[$1]=$!
}

curse_download_path() {
  curl -sL "$CURSE_URL"/wow/addons/"$1"/download | \
    grep Elerium.PublicProjectDownload.countdown | \
    grep -o "/wow/addons/$1/download/.*/file"
}

wowace_slug() {
  zip_url "https://www.wowace.com/projects/$1/files/latest" &
  processes[$1]=$!
}

zip_url() {
  cd "$WORKING_TEMP_DIR"
  
  addon_zip=$(mktemp -t XXXXX.addon.zip -p "$WORKING_TEMP_DIR")

  curl -s -L $1 --output $addon_zip > /dev/null
  unzip -oq $addon_zip -d "$ADDON_DIR" $2 2>/dev/null

  return $?
}

nested_zip_url() {
NESTED_LINK="$ADDON_DIR$2"
ln -s "$ADDON_DIR" "$NESTED_LINK"
zip_url $1 &
pid=$!
}

elvui() {
nested_zip_url https://git.tukui.org/elvui/elvui/-/archive/master/elvui-master.zip elvui-master
processes[ElvUI]=$pid
nested_links+=( "$NESTED_LINK" )
}

curse_slug scrap
curse_slug big-wigs
curse_slug little-wigs
curse_slug capping-bg-timers
curse_slug lootappraiser
curse_slug lootappraiser_challenge
curse_slug details
curse_slug askmrrobot
curse_slug raiderio

wowace_slug blockchinese
wowace_slug advancedinterfaceoptions
wowace_slug weakauras-2

elvui

for key in ${!processes[@]}; do
  unset fail
  wait ${processes[$key]} || fail=true
  if [ $fail ]; then
    echo -e "[\e[31mFailure\e[39m] $key"
    STATUS=1
  else
    echo -e "[\e[32mSuccessful\e[39m] $key"
  fi
done
