#!/bin/bash

set -e

echo "Initializing..."

declare -A processes
declare -a nested_links
declare -i status


ADDON_DIR="$(realpath -s "$WOW_ADDON_DIR")"
if [ -z "$ADDON_DIR" ]
then
  echo 'Set $WOW_ADDON_DIR or pass addon directory as argument!'
  exit 1
fi

ADDON_FILE="${ADDON_DIR}/Addonfile"

for arg in "$@"
do
    if [ "$arg" == "edit" ]
    then
      echo "Opening $ADDON_FILE for editing"
      $EDITOR "$ADDON_FILE"
      exit 0
    fi
done

if [ ! -f "$ADDON_FILE" ]
then
  echo "No Addonfile found in $ADDON_DIR"
  echo "Type wow-addons edit to edit Addonfile"
  exit 1
fi

WORKING_TEMP_DIR=$(mktemp -d -t tmp.XXXXXXXXXX)
print_status() {
  incomplete=0
  for key in ${!processes[@]}; do
    pid=${processes[$key]}
    if [ -d "/proc/${pid}" ]; then
      echo -e "\r[\e[33mWaiting\e[39m] $key"
      incomplete=1
    else
      wait $pid && \
        echo -e "\r[\e[32mSuccessful\e[39m] $key" || \
        (echo -e "[\e[31mFailure\e[39m] $key" && status=1)
    fi
  done

  return $incomplete
}

function finish {
  rm -rf "$WORKING_TEMP_DIR"
  for link in "${nested_links[@]}"; do
    rm -f "$link"
  done

  exit $status
}
trap finish EXIT

CURSE_URL='https://www.curseforge.com'
git_repo() {
  git clone "$1" "$ADDON_DIR/$2" 2> /dev/null || git -C "$ADDON_DIR/$2" pull &> /dev/null
}

curse_slug() {
  curse_slug_fork "$1" &
  processes[$1]=$!
}

curse_slug_fork() {
  zip_path=$(curse_download_path "$1")
  echo ~~~"$zip_path" >> /tmp/qwer
  [ -z "$zip_path" ] && return 1

  zip_url "$CURSE_URL"$zip_path

  return $?
}

curse_download_path() {
  cookie_curl \
    --tlsv1.3 \
  "$CURSE_URL"/wow/addons/"$1"/download \
    | grep "If your download doesn't start automatically, click" \
    | grep -o "/wow/addons/$1/download/.*/file"
}

cookie_curl (){
  curl \
    -sL \
    -b /tmp/cookie.txt -c /tmp/cookie.txt \
    -H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:69.0) Gecko/20100101 Firefox/69.0' \
    -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \
    -H 'Accept-Language: en-US,en;q=0.5' \
    -H 'DNT: 1' \
    -H 'Connection: keep-alive' \
    -H 'Upgrade-Insecure-Requests: 1' \
    -H 'Cache-Control: max-age=0' \
    $@
}

wowace_slug() {
  zip_url "https://www.wowace.com/projects/$1/files/latest" &
  processes[$1]=$!
}

zip_url() {
  cd "$WORKING_TEMP_DIR"
  
  addon_zip=$(mktemp -t XXXXX.addon.zip -p "$WORKING_TEMP_DIR")

  cookie_curl --tlsv1.3 --output $addon_zip $1 > /dev/null
  unzip -oq $addon_zip -d "$ADDON_DIR" $2 2>/dev/null

  return $?
}

nested_zip_url() {
  NESTED_LINK="$ADDON_DIR/$2"
  ln -s "$ADDON_DIR" "$NESTED_LINK"
  zip_url $1 &
  pid=$!
}

elvui() {
  nested_zip_url https://git.tukui.org/elvui/elvui/-/archive/master/elvui-master.zip elvui-master
  processes[ElvUI]=$pid
  nested_links+=( "$NESTED_LINK" )
}

source "$ADDON_FILE"

echo "Installing..."

while ! print_status; do
  sleep 1
  printf "\033[${#processes[@]}A"
done
